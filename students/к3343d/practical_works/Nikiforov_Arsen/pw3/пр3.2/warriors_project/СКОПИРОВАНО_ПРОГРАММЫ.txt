Path: warriors_app/admin.py
# warriors_app/admin.py

from django.contrib import admin
from .models import Warrior, Profession, Skill, SkillOfWarrior

admin.site.register(Warrior)
admin.site.register(Profession)
admin.site.register(Skill)
admin.site.register(SkillOfWarrior)





Path: warriors_app/apps.py
from django.apps import AppConfig


class WarriorsAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'warriors_app'





Path: warriors_app/models.py
from django.db import models

class Warrior(models.Model):
   """
   Описание война
   """

   race_types = (
       ('s', 'student'),
       ('d', 'developer'),
       ('t', 'teamlead'),
   )
   race = models.CharField(max_length=1, choices=race_types, verbose_name='Расса')
   name = models.CharField(max_length=120, verbose_name='Имя')
   level = models.IntegerField(verbose_name='Уровень', default=0)
   skill = models.ManyToManyField('Skill', verbose_name='Умения', through='SkillOfWarrior',
                                  related_name='warrior_skils')
   profession = models.ForeignKey('Profession', on_delete=models.CASCADE, verbose_name='Профессия',
                                  blank=True, null=True)


class Profession(models.Model):
   """
   Описание профессии
   """

   title = models.CharField(max_length=120, verbose_name='Название')
   description = models.TextField(verbose_name='Описание')


class Skill(models.Model):
   """
   Описание умений
   """

   title = models.CharField(max_length=120, verbose_name='Наименование')

   def __str__(self):
       return self.title


class SkillOfWarrior(models.Model):
   """
   Описание умений война
   """

   skill = models.ForeignKey('Skill', verbose_name='Умение', on_delete=models.CASCADE)
   warrior = models.ForeignKey('Warrior', verbose_name='Воин', on_delete=models.CASCADE)
   level = models.IntegerField(verbose_name='Уровень освоения умения')





Path: warriors_app/serializers.py
# warriors_app/serializers.py
from rest_framework import serializers
from .models import Profession
from .models import Warrior, Skill, SkillOfWarrior, Profession


class ProfessionCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Profession
        fields = "__all__"

class WarriorWithProfessionSerializer(serializers.ModelSerializer):
    profession = ProfessionCreateSerializer()

    class Meta:
        model = Warrior
        fields = "__all__"

class WarriorWithSkillsSerializer(serializers.ModelSerializer):
    skills = serializers.StringRelatedField(many=True)

    class Meta:
        model = Warrior
        fields = "__all__"






Path: warriors_app/urls.py
# warriors_app/urls.py
from django.urls import path
from django.views.generic import TemplateView
from .views import (
    WarriorWithProfessionAPIView,
    ProfessionCreateView,
    WarriorWithSkillsAPIView,
    WarriorDetailsAPIView,
    WarriorDeleteAPIView,
    WarriorUpdateAPIView,
)

app_name = "warriors_app"

# Эндпоинты все тут
urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='home'),
    path('warriors/', WarriorWithProfessionAPIView.as_view()),
    path('profession/create/', ProfessionCreateView.as_view(), name='create_profession'),
    path('warriors-with-professions/', WarriorWithProfessionAPIView.as_view(), name='warriors_with_professions'),
    path('warriors-with-skills/', WarriorWithSkillsAPIView.as_view(), name='warriors_with_skills'),
    path('warriors/<int:pk>/', WarriorDetailsAPIView.as_view(), name='warrior_details'),
    path('warriors/<int:pk>/delete/', WarriorDeleteAPIView.as_view(), name='warrior_delete'),
    path('warriors/<int:pk>/update/', WarriorUpdateAPIView.as_view(), name='warrior_update'),
]





Path: warriors_app/views.py
from django.shortcuts import get_object_or_404
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status
from .models import Warrior
from .serializers import *  

app_name = "warriors_app_namespace"

class WarriorWithProfessionAPIView(APIView):
    def get(self, request):
        warriors = Warrior.objects.all()
        serializer = WarriorWithProfessionSerializer(warriors, many=True)
        return Response({"Warriors": serializer.data})

class ProfessionCreateView(APIView):
    def post(self, request):
        profession_data = request.data.get("profession")
        serializer = ProfessionCreateSerializer(data=profession_data)
        if serializer.is_valid(raise_exception=True):
            profession_saved = serializer.save()
        return Response({"Success": "Profession '{}' created successfully.".format(profession_saved.title)})

class WarriorWithSkillsAPIView(APIView):
    def get(self, request):
        warriors = Warrior.objects.all()
        serializer = WarriorWithSkillsSerializer(warriors, many=True)
        return Response({"Warriors": serializer.data})
    
class WarriorDetailsAPIView(APIView):
    def get(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        serializer = WarriorWithProfessionSerializer(warrior)
        return Response(serializer.data)
    
class WarriorDeleteAPIView(APIView):
    def delete(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        warrior.delete()
        return Response({"Success": f"Warrior with id {pk} deleted successfully."})

class WarriorUpdateAPIView(APIView):
    def put(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        serializer = WarriorWithProfessionSerializer(warrior, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"Success": f"Warrior with id {pk} updated successfully."})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)





Path: warriors_project/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('war/', include('warriors_app.urls', namespace='warriors_app_namespace')),
    path('', include('warriors_app.urls', namespace='warriors_app_namespace')), 

]





Path: warriors_app/admin.py
# warriors_app/admin.py

from django.contrib import admin
from .models import Warrior, Profession, Skill, SkillOfWarrior

admin.site.register(Warrior)
admin.site.register(Profession)
admin.site.register(Skill)
admin.site.register(SkillOfWarrior)





Path: warriors_app/apps.py
from django.apps import AppConfig


class WarriorsAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'warriors_app'





Path: warriors_app/models.py
from django.db import models

class Warrior(models.Model):
   """
   Описание война
   """

   race_types = (
       ('s', 'student'),
       ('d', 'developer'),
       ('t', 'teamlead'),
   )
   race = models.CharField(max_length=1, choices=race_types, verbose_name='Расса')
   name = models.CharField(max_length=120, verbose_name='Имя')
   level = models.IntegerField(verbose_name='Уровень', default=0)
   skill = models.ManyToManyField('Skill', verbose_name='Умения', through='SkillOfWarrior',
                                  related_name='warrior_skils')
   profession = models.ForeignKey('Profession', on_delete=models.CASCADE, verbose_name='Профессия',
                                  blank=True, null=True)


class Profession(models.Model):
   """
   Описание профессии
   """

   title = models.CharField(max_length=120, verbose_name='Название')
   description = models.TextField(verbose_name='Описание')


class Skill(models.Model):
   """
   Описание умений
   """

   title = models.CharField(max_length=120, verbose_name='Наименование')

   def __str__(self):
       return self.title


class SkillOfWarrior(models.Model):
   """
   Описание умений война
   """

   skill = models.ForeignKey('Skill', verbose_name='Умение', on_delete=models.CASCADE)
   warrior = models.ForeignKey('Warrior', verbose_name='Воин', on_delete=models.CASCADE)
   level = models.IntegerField(verbose_name='Уровень освоения умения')





Path: warriors_app/serializers.py
# warriors_app/serializers.py
from rest_framework import serializers
from .models import Profession
from .models import Warrior, Skill, SkillOfWarrior, Profession


class ProfessionCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Profession
        fields = "__all__"

class WarriorWithProfessionSerializer(serializers.ModelSerializer):
    profession = ProfessionCreateSerializer()

    class Meta:
        model = Warrior
        fields = "__all__"

class WarriorWithSkillsSerializer(serializers.ModelSerializer):
    skills = serializers.StringRelatedField(many=True)

    class Meta:
        model = Warrior
        fields = "__all__"






Path: warriors_app/urls.py
# warriors_app/urls.py
from django.urls import path
from django.views.generic import TemplateView
from .views import (
    WarriorWithProfessionAPIView,
    ProfessionCreateView,
    WarriorWithSkillsAPIView,
    WarriorDetailsAPIView,
    WarriorDeleteAPIView,
    WarriorUpdateAPIView,
)

app_name = "warriors_app"

# Эндпоинты все тут
urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='home'),
    path('warriors/', WarriorWithProfessionAPIView.as_view()),
    path('profession/create/', ProfessionCreateView.as_view(), name='create_profession'),
    path('warriors-with-professions/', WarriorWithProfessionAPIView.as_view(), name='warriors_with_professions'),
    path('warriors-with-skills/', WarriorWithSkillsAPIView.as_view(), name='warriors_with_skills'),
    path('warriors/<int:pk>/', WarriorDetailsAPIView.as_view(), name='warrior_details'),
    path('warriors/<int:pk>/delete/', WarriorDeleteAPIView.as_view(), name='warrior_delete'),
    path('warriors/<int:pk>/update/', WarriorUpdateAPIView.as_view(), name='warrior_update'),
]





Path: warriors_app/views.py
from django.shortcuts import get_object_or_404
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status
from .models import Warrior
from .serializers import *  

app_name = "warriors_app_namespace"

class WarriorWithProfessionAPIView(APIView):
    def get(self, request):
        warriors = Warrior.objects.all()
        serializer = WarriorWithProfessionSerializer(warriors, many=True)
        return Response({"Warriors": serializer.data})

class ProfessionCreateView(APIView):
    def post(self, request):
        profession_data = request.data.get("profession")
        serializer = ProfessionCreateSerializer(data=profession_data)
        if serializer.is_valid(raise_exception=True):
            profession_saved = serializer.save()
        return Response({"Success": "Profession '{}' created successfully.".format(profession_saved.title)})

class WarriorWithSkillsAPIView(APIView):
    def get(self, request):
        warriors = Warrior.objects.all()
        serializer = WarriorWithSkillsSerializer(warriors, many=True)
        return Response({"Warriors": serializer.data})
    
class WarriorDetailsAPIView(APIView):
    def get(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        serializer = WarriorWithProfessionSerializer(warrior)
        return Response(serializer.data)
    
class WarriorDeleteAPIView(APIView):
    def delete(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        warrior.delete()
        return Response({"Success": f"Warrior with id {pk} deleted successfully."})

class WarriorUpdateAPIView(APIView):
    def put(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        serializer = WarriorWithProfessionSerializer(warrior, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"Success": f"Warrior with id {pk} updated successfully."})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)





Path: warriors_project/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('warriors_app.urls', namespace='warriors_app_namespace')),
]





Path: warriors_app/admin.py
# warriors_app/admin.py

from django.contrib import admin
from .models import Warrior, Profession, Skill, SkillOfWarrior

admin.site.register(Warrior)
admin.site.register(Profession)
admin.site.register(Skill)
admin.site.register(SkillOfWarrior)





Path: warriors_app/apps.py
from django.apps import AppConfig


class WarriorsAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'warriors_app'





Path: warriors_app/models.py
from django.db import models

class Warrior(models.Model):
   """
   Описание война
   """

   race_types = (
       ('s', 'student'),
       ('d', 'developer'),
       ('t', 'teamlead'),
   )
   race = models.CharField(max_length=1, choices=race_types, verbose_name='Расса')
   name = models.CharField(max_length=120, verbose_name='Имя')
   level = models.IntegerField(verbose_name='Уровень', default=0)
   skill = models.ManyToManyField('Skill', verbose_name='Умения', through='SkillOfWarrior',
                                  related_name='warrior_skils')
   profession = models.ForeignKey('Profession', on_delete=models.CASCADE, verbose_name='Профессия',
                                  blank=True, null=True)


class Profession(models.Model):
   """
   Описание профессии
   """

   title = models.CharField(max_length=120, verbose_name='Название')
   description = models.TextField(verbose_name='Описание')


class Skill(models.Model):
   """
   Описание умений
   """

   title = models.CharField(max_length=120, verbose_name='Наименование')

   def __str__(self):
       return self.title


class SkillOfWarrior(models.Model):
   """
   Описание умений война
   """

   skill = models.ForeignKey('Skill', verbose_name='Умение', on_delete=models.CASCADE)
   warrior = models.ForeignKey('Warrior', verbose_name='Воин', on_delete=models.CASCADE)
   level = models.IntegerField(verbose_name='Уровень освоения умения')





Path: warriors_app/serializers.py
# warriors_app/serializers.py
from rest_framework import serializers
from .models import Profession
from .models import Warrior, Skill, SkillOfWarrior, Profession


class ProfessionCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Profession
        fields = "__all__"

class WarriorWithProfessionSerializer(serializers.ModelSerializer):
    profession = ProfessionCreateSerializer()

    class Meta:
        model = Warrior
        fields = "__all__"

class WarriorWithSkillsSerializer(serializers.ModelSerializer):
    skills = serializers.StringRelatedField(many=True)

    class Meta:
        model = Warrior
        fields = "__all__"






Path: warriors_app/urls.py
# warriors_app/urls.py
from django.urls import path
from django.views.generic import TemplateView
from .views import (
    WarriorWithProfessionAPIView,
    ProfessionCreateView,
    WarriorWithSkillsAPIView,
    WarriorDetailsAPIView,
    WarriorDeleteAPIView,
    WarriorUpdateAPIView,
)

app_name = "warriors_app"

# Эндпоинты все тут
urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='home'),
    path('warriors/', WarriorWithProfessionAPIView.as_view()),
    path('profession/create/', ProfessionCreateView.as_view(), name='create_profession'),
    path('warriors-with-professions/', WarriorWithProfessionAPIView.as_view(), name='warriors_with_professions'),
    path('warriors-with-skills/', WarriorWithSkillsAPIView.as_view(), name='warriors_with_skills'),
    path('warriors/<int:pk>/', WarriorDetailsAPIView.as_view(), name='warrior_details'),
    path('warriors/<int:pk>/delete/', WarriorDeleteAPIView.as_view(), name='warrior_delete'),
    path('warriors/<int:pk>/update/', WarriorUpdateAPIView.as_view(), name='warrior_update'),
]





Path: warriors_app/views.py
from django.shortcuts import get_object_or_404
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status
from .models import Warrior
from .serializers import *  

app_name = "warriors_app_namespace"

class WarriorWithProfessionAPIView(APIView):
    def get(self, request):
        warriors = Warrior.objects.all()
        serializer = WarriorWithProfessionSerializer(warriors, many=True)
        return Response({"Warriors": serializer.data})

class ProfessionCreateView(APIView):
    def post(self, request):
        profession_data = request.data.get("profession")
        serializer = ProfessionCreateSerializer(data=profession_data)
        if serializer.is_valid(raise_exception=True):
            profession_saved = serializer.save()
        return Response({"Success": "Profession '{}' created successfully.".format(profession_saved.title)})

class WarriorWithSkillsAPIView(APIView):
    def get(self, request):
        warriors = Warrior.objects.all()
        serializer = WarriorWithSkillsSerializer(warriors, many=True)
        return Response({"Warriors": serializer.data})
    
class WarriorDetailsAPIView(APIView):
    def get(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        serializer = WarriorWithProfessionSerializer(warrior)
        return Response(serializer.data)
    
class WarriorDeleteAPIView(APIView):
    def delete(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        warrior.delete()
        return Response({"Success": f"Warrior with id {pk} deleted successfully."})

class WarriorUpdateAPIView(APIView):
    def put(self, request, pk):
        warrior = get_object_or_404(Warrior, pk=pk)
        serializer = WarriorWithProfessionSerializer(warrior, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"Success": f"Warrior with id {pk} updated successfully."})
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)





Path: warriors_project/urls.py
# warriors_project/urls.py
from django.contrib import admin
from django.urls import path, include
from warriors_app.views import WarriorWithProfessionAPIView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('warriors_app.urls', namespace='warriors_app_namespace')),
    path('warriors-with-professions/', WarriorWithProfessionAPIView.as_view(), name='warriors_with_professions'),
]





