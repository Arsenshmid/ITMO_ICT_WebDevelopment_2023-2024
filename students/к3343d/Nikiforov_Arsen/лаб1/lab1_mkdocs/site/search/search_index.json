{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u0412\u0435\u0431 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041e\u0442\u0447\u0435\u0442 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u041d\u0438\u043a\u0438\u0444\u043e\u0440\u043e\u0432 \u0410\u0440\u0441\u0435\u043d \u0413\u0440\u0443\u043f\u043f\u0430: \u041a3343d \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0414\u043e\u0431\u0440\u044f\u043a\u043e\u0432 \u0414. \u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2023 \u0433.","title":"Home"},{"location":"#-","text":"","title":"\u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e"},{"location":"#_1","text":"","title":"\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u0412\u0435\u0431 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#_2","text":"","title":"\u041e\u0442\u0447\u0435\u0442"},{"location":"#no1","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u041d\u0438\u043a\u0438\u0444\u043e\u0440\u043e\u0432 \u0410\u0440\u0441\u0435\u043d \u0413\u0440\u0443\u043f\u043f\u0430: \u041a3343d \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0414\u043e\u0431\u0440\u044f\u043a\u043e\u0432 \u0414. \u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2023 \u0433.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 client.py import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f UDP client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0410\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_address = ('localhost', 12345) # \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 message = \"Hello, server\" # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.sendto(message.encode(), server_address) # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 data, _ = client_socket.recvfrom(1024) # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {data.decode()}\") # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_socket.close() server.py import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f UDP server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_address = ('localhost', 12345) server_socket.bind(server_address) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 12345...\") while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441 #\u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u044d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 data data, client_address = server_socket.recvfrom(1024) #\u044d\u0442\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0430 1024 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442 \u043a\u043e\u0440\u043e\u0447\u0435 # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ({client_address}): {data.decode()}\") # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 response = \"Hello, client\" server_socket.sendto(response.encode(), client_address)","title":"Task 1"},{"location":"task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 client.py import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0410\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_address = ('localhost', 12345) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.connect(server_address) print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443...\") # \u0412\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 (\u0434\u043b\u0438\u043d\u044b \u043a\u0430\u0442\u0435\u0442\u043e\u0432) \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b a = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")) b = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430: \")) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0443 message = f\"{a},{b}\" client_socket.send(message.encode()) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 response = client_socket.recv(1024) print(f\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {response.decode()}\") # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c client_socket.close() server.py import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c server_address = ('localhost', 12345) # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_socket.bind(server_address) # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 5 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439) server_socket.listen(5) print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u0436\u0434\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432...\") while True: # \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_socket, client_address = server_socket.accept() print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_address}\") # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data = client_socket.recv(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {data.decode()}\") # \u0420\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430) params = data.decode().split(',') a = float(params[0]) b = float(params[1]) # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443 (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430) c = (a**2 + b**2)**0.5 # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443 response = f\"\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 (c) \u0440\u0430\u0432\u043d\u0430: {c}\" client_socket.send(response.encode()) # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c client_socket.close()","title":"Task 2"},{"location":"task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 server.py import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c IP-\u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c host = \"127.0.0.1\" # IP-\u0430\u0434\u0440\u0435\u0441 localhost port = 8080 # \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u0442 # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 server_socket.bind((host, port)) # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f server_socket.listen(1) # 1 - \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0436\u0438\u0434\u0430\u044e\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 http://{host}:{port}/\") while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 client_socket, client_address = server_socket.accept() # \u0427\u0438\u0442\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 request = client_socket.recv(1024).decode() # \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 response = \"\"\"HTTP/1.1 200 OK Content-Type: text/html \"\"\" # \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430 \"index.html\" with open(\"index.html\", \"r\") as file: response += file.read() # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client_socket.sendall(response.encode()) # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c client_socket.close() index.html <!DOCTYPE html> <html> <head> <title>MESSAGE LAB1</title> </head> <body> <h1>NIKIFOROV ARSEN</h1> <p>HTML-PAGE FROM MY SERVER</p> </body> </html> \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 8080","title":"Task 3"},{"location":"task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 client.py import socket import threading class Client: def __init__(self, host='127.0.0.1', port=55555): self.nickname = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: \") self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.client.connect((host, port)) def receive(self): while True: try: message = self.client.recv(1024).decode('utf-8') if message == 'NICK': self.client.send(self.nickname.encode('utf-8')) else: print(message) except: print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430!\") self.client.close() break def write(self): while True: message = input(\"\") if message.lower() == 'quit': # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \"quit\" \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 self.client.send('quit'.encode('utf-8')) break else: message_to_send = f'{self.nickname}: {message}' self.client.send(message_to_send.encode('utf-8')) def run(self): receive_thread = threading.Thread(target=self.receive) receive_thread.start() write_thread = threading.Thread(target=self.write) write_thread.start() client = Client() client.run() server.py import threading import socket class Server: def __init__(self, host = '127.0.0.1', port = 55555): self.host = host self.port = port self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.server.bind((self.host, self.port)) self.server.listen() self.clients = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 self.nicknames = [] # \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 def broadcast(self, message): # \u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c for client in self.clients: client.send(message) def handle(self, client): while True: try: message = client.recv(1024) # \u041f\u0440\u0438\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 1024 \u0431\u0430\u0439\u0442\u0430) self.broadcast(message) # \u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c except: # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f index = self.clients.index(client) self.clients.remove(client) client.close() nickname = self.nicknames[index] self.nicknames.remove(nickname) self.broadcast(f'{nickname} left the chat!'.encode('ascii')) break def receive(self): while True: client, address = self.server.accept() # \u041f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430 print(f'Connected with {str(address)}') client.send('NICK'.encode('ascii')) # \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 nickname = client.recv(1024).decode('ascii') # \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 self.nicknames.append(nickname) self.clients.append(client) print(f'Nickname of the client is {nickname}!') self.broadcast(f'{nickname} joined the chat!'.encode('ascii')) # \u041e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u0435 \u043e \u0432\u0445\u043e\u0434\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client.send('Connected to the server!'.encode('ascii')) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 thread = threading.Thread(target=self.handle, args=(client,)) thread.start() # \u0417\u0430\u043f\u0443\u0441\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 def run(self): print(\"Server started...\") self.receive() # \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 server = Server() server.run() \u041d\u0430\u043f\u0438\u0441\u0430\u043b \u043a\u043e\u0434 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u043b \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u0441\u043a\u0440\u0438\u043d\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0447\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a. \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u0449\u0430\u0442\u044c\u0441\u044f \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u0449\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441","title":"Task 4"},{"location":"task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 server.py import http.server import urllib.parse # \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0451\u0421\u0403\u0421\u040a \u0420\u0455\u0421\u2020\u0420\u00b5\u0420\u0405\u0420\u0455\u0420\u0454 grades = {} class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler): def do_GET(self): if self.path == '/': self.send_response(200) self.send_header(\"Content-type\", \"text/html\") self.end_headers() # HTML-\u0421\u201e\u0420\u0455\u0421\u0402\u0420\u0458\u0420\u00b0 \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u0491\u0420\u0455\u0420\u00b1\u0420\u00b0\u0420\u0406\u0420\u00bb\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0420\u0455\u0421\u2020\u0420\u00b5\u0420\u0405\u0420\u0454\u0420\u0451 html = \"\"\" <html> <head><title>Add Grade</title></head> <body> <h1>Add Grade</h1> <form method=\"POST\" action=\"/add_grade\"> <label for=\"subject\">Subject:</label><br> <input type=\"text\" id=\"subject\" name=\"subject\"><br> <label for=\"grade\">Grade:</label><br> <input type=\"number\" id=\"grade\" name=\"grade\" min=\"1\" max=\"5\"><br><br> <input type=\"submit\" value=\"Submit\"> </form> <p><a href=\"/grades\">Grades Overview</a></p> </body></html> \"\"\" self.wfile.write(bytes(html, \"utf8\")) return elif self.path == '/grades': self.send_response(200) self.send_header(\"Content-type\", \"text/html\") self.end_headers() # \u0420\u040e\u0421\u201a\u0421\u0402\u0420\u00b0\u0420\u0405\u0420\u0451\u0421\u2020\u0420\u00b0 \u0421\u0403 \u0420\u0455\u0420\u00b1\u0420\u00b7\u0420\u0455\u0421\u0402\u0420\u0455\u0420\u0458 \u0420\u0455\u0421\u2020\u0420\u00b5\u0420\u0405\u0420\u0455\u0420\u0454 \u0420\u0406 \u0420\u0406\u0420\u0451\u0420\u0491\u0420\u00b5 \u0421\u201a\u0420\u00b0\u0420\u00b1\u0420\u00bb\u0420\u0451\u0421\u2020\u0421\u2039 html = \"\"\" <html> <head><title>Grades Overview</title></head> <body> <h1>Grades Overview</h1> <table border=\"1\"> <tr> <th>Subject</th> <th>Grade</th> </tr> \"\"\" for subject, grade in grades.items(): html += f\"<tr><td>{subject}</td><td>{grade}</td></tr>\" html += \"</table>\" html += \"<p><a href='/'>Add Grade</a></p>\" html += \"</body></html>\" self.wfile.write(bytes(html, \"utf8\")) return def do_POST(self): content_length = int(self.headers['Content-Length']) post_data = self.rfile.read(content_length).decode('utf-8') params = urllib.parse.parse_qs(post_data) subject = params['subject'][0] grade = params['grade'][0] try: grade = int(grade) if grade < 1 or grade > 5: raise ValueError(\"Grade out of range\") grades[subject] = grade self.send_response(303) self.send_header('Location', '/') self.end_headers() except ValueError: self.send_response(400) self.end_headers() self.wfile.write(bytes(\"Bad request. Grade must be between 1 and 5.\", \"utf8\")) # \u0420\u040e\u0420\u0455\u0420\u00b7\u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u00b5 \u0420\u0455\u0420\u00b1\u0421\u0409\u0420\u00b5\u0420\u0454\u0421\u201a\u0420\u00b0 \u0420\u0455\u0420\u00b1\u0421\u0402\u0420\u00b0\u0420\u00b1\u0420\u0455\u0421\u201a\u0421\u2021\u0420\u0451\u0420\u0454\u0420\u00b0 \u0420\u00b7\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0455\u0421\u0403\u0420\u0455\u0420\u0406 handler_object = MyHttpRequestHandler # \u0420\u040e\u0420\u0455\u0420\u00b7\u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u00b5 HTTP-\u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u0406\u0420\u00b5\u0421\u0402\u0420\u00b0 my_server = http.server.HTTPServer((\"localhost\", 8080), handler_object) print(\"Server is running on localhost:8080...\") # \u0420\u2014\u0420\u00b0\u0420\u0457\u0421\u0453\u0421\u0403\u0420\u0454 \u0421\u0403\u0420\u00b5\u0421\u0402\u0420\u0406\u0420\u00b5\u0421\u0402\u0420\u00b0 my_server.serve_forever() \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043e\u0446\u0435\u043d\u043e\u043a","title":"Task 5"}]}