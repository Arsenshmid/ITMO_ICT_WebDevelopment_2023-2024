

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/main.js

import { createApp } from 'vue'; 
import App from './App.vue';
import router from './router';
import store from './store'; //  хранилище Vuex
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import BootstrapVue3 from 'bootstrap-vue-3';
import VueAxios from 'vue-axios';

const app = createApp(App);

app.use(router);
app.use(store); // Vuex в приложении
app.use(BootstrapVue3);
app.use(VueAxios, axios);

// Проверка localStorage на наличие токена и его установка в состояние Vuex
const userToken = localStorage.getItem('userToken');
if (userToken) {
  store.commit('setUser', { token: userToken });
}

app.mount('#app');


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/App.vue

<template>
  <div class="app-container">
    <img alt="Vue logo" src="./assets/logo.png" class="logo">
    <div class="menu" v-if="showButtons">
      <h1>Добро пожаловать в наш отель!</h1>
      <button @click="showComponent = 'login'">Вход</button>
      <button @click="showComponent = 'registration'">Регистрация</button>
    </div>
    <LoginPage v-if="showComponent === 'login'" @show-user-profile="showUserProfile" />
    <RegistrationPage v-if="showComponent === 'registration'" />
    <UserProfile v-if="showComponent === 'userProfile'" @go-back="showMainButtons" />
  </div>
</template>

<script>
import RegistrationPage from './components/RegistrationPage.vue';
import LoginPage from './components/LoginPage.vue';
import UserProfile from './components/UserProfile.vue';

export default {
  name: 'App',
  components: {
    RegistrationPage,
    LoginPage,
    UserProfile
  },
  data() {
    return {
      showComponent: null,
      showButtons: true,
    };
  },
  methods: {
    showUserProfile() {
      this.showComponent = 'userProfile';
      this.showButtons = false;
    },
    showMainButtons() {
      this.showComponent = null;
      this.showButtons = true;
    }
  }
};
</script>

<style scoped>
.app-container {
  text-align: center;
  background: linear-gradient(to right, #b4ffb0, #b19dff); 
  min-height: 100vh;
}

.logo {
  max-width: 150px;
  margin: 20px auto;
}

.menu h1 {
  color: #fff;
  text-shadow: 2px 2px 4px #000;
}

.menu {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

button {
  padding: 10px 20px;
  border: none;
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #0056b3;
}
</style>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/router/index.js

import { createRouter, createWebHistory } from 'vue-router';
import RegistrationPage from '../components/RegistrationPage.vue';
import LoginPage from '../components/LoginPage.vue';
import UserProfile from '../components/UserProfile.vue';
import ClientsTable from '../components/ClientsTable.vue';
import EmployeesTable from '../components/EmployeesTable.vue';
import RoomStatistics from '../components/RoomStatistics.vue';
import ComplexRoomsTable from '../components/ComplexRoomsTable.vue';
import RoomsTable from '../components/RoomsTable.vue';
import RoomReviewsList from '../components/RoomReviewsList.vue';
import LeaveFeedback from '../components/LeaveFeedback.vue';
import AddReview from '../components/AddReview.vue';
const routes = [
  { path: '/registration', component: RegistrationPage },
  { path: '/login', component: LoginPage },
  { path: '/user-profile', component: UserProfile },
  { path: '/clients', component: ClientsTable },
  { path: '/employees', component: EmployeesTable },
  { path: '/room-statistics', component: RoomStatistics },
  { path: '/complex-rooms', component: ComplexRoomsTable },
  { path: '/rooms-table', component: RoomsTable },
  {
    path: '/room/:roomId/reviews',
    name: 'RoomReviewsList',
    component: RoomReviewsList,
    props: true
  },
  {
    path: '/room/:roomId/leave-feedback',
    name: 'LeaveFeedback',
    component: LeaveFeedback,
    props: true
  },

  {
    path: '/room/:roomId/add-review',
    name: 'AddReview',
    component: AddReview,
    props: true
  }
];

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
});

export default router;


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RegistrationPage.vue

<template>
  <div>
    <h2>Регистрация</h2>
    <!-- Форма регистрации -->
    <form @submit.prevent="register">
      <div class="input-wrapper">
        <input type="text" v-model="userData.username" placeholder="Имя пользователя">
      </div>
      <div class="input-wrapper">
        <input type="password" v-model="userData.password" placeholder="Пароль">
      </div>
      <button type="submit">Зарегистрироваться</button>
    </form>

    <!-- Сообщение об успешной регистрации -->
    <div v-if="registrationSuccess" class="success-message">
      Регистрация прошла успешно! Теперь вы можете войти.
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      userData: {
        username: '',
        email: '',
        password: ''
      },
      registrationSuccess: false, // Добавляем переменную для отслеживания успешной регистрации
    };
  },
  methods: {
    async register() {
      try {
        const response = await fetch('http://localhost:8000/hotel_api/register/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.userData)
        });

        if (response.ok) {
          const data = await response.json();
          console.log('Успешная регистрация', data);
          this.registrationSuccess = true; // Устанавливаем успешную регистрацию в true
        } else {
          console.error('Ошибка регистрации', response.statusText);
        }
      } catch (error) {
        console.error('Ошибка сети', error);
      }
    }
  }
};
</script>

<style scoped>
.navigation-links {
  text-align: center;
  margin-bottom: 20px;
}

.navigation-links a {
  margin: 0 10px;
  text-decoration: none;
  color: #333;
  font-weight: bold;
}

.navigation-links a:hover {
  color: #007bff;
  text-decoration: underline;
}

.input-wrapper {
  margin-bottom: 10px; /* Расстояние между полями ввода */
}

.success-message {
  color: green;
  margin-top: 10px;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LoginPage.vue

<template>
  <form @submit.prevent="login">
    <h2>Вход</h2>
    <div class="input-wrapper">
      <input type="text" v-model="userData.username" placeholder="Имя пользователя">
    </div>
    <div class="input-wrapper">
      <input type="password" v-model="userData.password" placeholder="Пароль">
    </div>
    <button type="submit">Войти</button>
    <div v-if="errorMessage" class="error-message">{{ errorMessage }}</div>
  </form>
</template>

<script>
export default {
  data() {
    return {
      userData: {
        username: '',
        password: '',
      },
      errorMessage: '',
    };
  },
  methods: {
    async login() {
      try {
        const response = await fetch('http://localhost:8000/hotel_api/api/login/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.userData)
        });

        if (response.ok) {
  const data = await response.json();
  localStorage.setItem('userToken', data.access);

  // Сохраните имя пользователя в состоянии Vuex
  this.$store.commit('setUser', { username: this.userData.username, token: data.access });

  this.$emit('show-user-profile');
  this.errorMessage = '';
}     
         else {
          this.errorMessage = 'Введите корректные данные';
        }
      } catch (error) {
        console.error('Ошибка сети', error);
      }
    }
  }
};
</script>

<style>
.input-wrapper {
  margin-bottom: 10px;
}

.error-message {
  color: red;
  margin-top: 10px;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/UserProfile.vue

<template>
  <div>
    <h2>Добро пожаловать в систему управления отелем, {{ username }}!</h2>
    <div class="navigation-links">
      <button @click="showRooms">Комнаты</button>
      <button @click="showClients">Клиенты</button>
      <button @click="showEmployees">Сотрудники</button>
      <button @click="showRoomStatistics">Статистика комнат</button>
      <button @click="showComplexRooms">Комплексная информация о комнатах</button>
      <button @click="showAddReviewForm">Оставить отзыв</button>
      <button @click="showReviewList">Показать отзывы</button>
      <button @click="emitBack">Назад</button>
    </div>

    <component :is="currentComponent" v-if="showTable" />

    <!-- Форма добавления отзыва -->
    <div v-if="showReviewForm">
      <AddReview :roomId="selectedRoomId" @review-added="updateReviews" />
    </div>

    <!-- Список отзывов -->
    <div v-if="showReviews">
      <h3>Отзывы</h3>
      <ul>
        <li v-for="review in reviews" :key="review.id">
          {{ review.text }} - {{ review.author }}
          <!-- Удаление отзывов можно добавить здесь -->
        </li>
      </ul>
    </div>
  </div>
</template>

<script>
import RoomsTable from './RoomsTable.vue';
import ClientsTable from './ClientsTable.vue';
import EmployeesTable from './EmployeesTable.vue';
import AddReview from './AddReview.vue';
import ReviewService from '@/reviewService'; // Убедитесь, что путь к ReviewService верный

export default {
  computed: {
    username() {
      return this.$store.state.user ? this.$store.state.user.username : 'Guest';
    }
  },
  components: {
    RoomsTable,
    ClientsTable,
    EmployeesTable,
    AddReview
  },
  data() {
    return {
      showTable: false,
      currentComponent: null,
      showReviewForm: false,
      showReviews: false,
      reviews: [], // Массив для хранения отзывов
      selectedRoomId: null // ID выбранной комнаты
    };
  },
  methods: {
    showAddReviewForm() {
      this.showReviewForm = true;
      this.showReviews = false;
    },
    showReviewList() {
      this.showReviewForm = false;
      this.showReviews = true;
      this.fetchReviews();
    },
    emitBack() {
      this.showTable = false;
    },
    fetchReviews() {
      ReviewService.getAllReviews()
        .then(response => {
          this.reviews = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении отзывов:', error);
        });
    },
    updateReviews() {
      this.fetchReviews();
    },


    showAddReview() {
    this.currentComponent = 'AddReview';
    this.showTable = true;
  },
    goToLeaveFeedback() {
      this.$router.push('/add-review');
    },
    leaveFeedback() {
      this.$router.push('/path-to-feedback-form');
    },
    showComplexRooms() {
      this.currentComponent = 'ComplexRoomsTable';
      this.showTable = true;
    },
    showRoomStatistics() {
      this.currentComponent = 'RoomStatistics';
      this.showTable = true;
    },
    showRooms() {
      this.currentComponent = 'RoomsTable';
      this.showTable = true;
    },
    showClients() {
      this.currentComponent = 'ClientsTable';
      this.showTable = true;
    },
    showEmployees() {
      this.currentComponent = 'EmployeesTable';
      this.showTable = true;
    },



  }
};
</script>

<style scoped>
.navigation-links {
  text-align: center;
  margin-bottom: 20px;
}
.navigation-links button {
  margin: 0 10px;
  text-decoration: none;
  color: #333;
  font-weight: bold;
}
.navigation-links button:hover {
  color: #007bff;
  text-decoration: underline;
}
</style>



File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomsTable.vue

<template> 
  <div>
    <h2>Список комнат</h2>

    <!-- Фильтры -->
    <label for="room_type">Тип комнаты:</label>
    <select v-model="filterType">
      <option value="">--Выберите тип--</option>
      <option value="single">Одноместный</option>
      <option value="double">Двухместный</option>
      <option value="suite">Люкс</option>
    </select>

    <label for="room_status">Статус комнаты:</label>
    <select v-model="filterStatus">
      <option value="">--Выберите статус--</option>
      <option value="available">Доступна</option>
      <option value="occupied">Занята</option>
      <option value="cleaning">На уборке</option>
    </select>

    <!-- Выбор даты бронирования -->
    <div class="date-selection">
      <input type="date" v-model="startDate" placeholder="Дата начала">
      <input type="date" v-model="endDate" placeholder="Дата окончания">
    </div>

    <!-- Таблица комнат -->
    <table>
      <thead>
        <tr>
          <th>Тип комнаты</th>
          <th>Номер этажа</th>
          <th>Статус</th>
          <th>Стоимость</th>
          <th>Действия</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="room in filteredRooms" :key="room.id">
          <td>{{ room.room_type }}</td>
          <td>{{ room.floor }}</td>
          <td>{{ room.status }}</td>
          <td>{{ room.cost }}</td>
          <td>
            <button v-if="room.status === 'available'" @click="bookRoom(room.id)">
              Забронировать
            </button>


          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      rooms: [],
      filterType: '',
      filterStatus: '',
      startDate: '', // Для хранения даты начала бронирования
      endDate: ''   // Для хранения даты окончания бронирования
    };
  },
  computed: {
    filteredRooms() {
      return this.rooms.filter(room => {
        return (!this.filterType || room.room_type === this.filterType) &&
               (!this.filterStatus || room.status === this.filterStatus);
      });
    }
  },
  methods: {
    fetchRooms() {
      axios.get('http://localhost:8000/hotel_api/api/rooms/')
        .then(response => {
          this.rooms = response.data;
        })
        .catch(error => {
          console.error('Ошибка загрузки комнат:', error);
        });
    },
    leaveReview(roomId) {
  console.log("Переход к добавлению отзыва для комнаты:", roomId);
  this.$router.push(`/room/${roomId}/add-review`);
},

    applyFilter() {
      this.fetchRooms();
    },
    bookRoom(roomId) {
      if (!this.startDate || !this.endDate) {
        alert('Необходимо указать даты начала и окончания бронирования');
        return;
      }

      const token = localStorage.getItem('userToken');
      axios.post(`http://localhost:8000/hotel_api/api/book_room/${roomId}/`, {
        start_date: this.startDate,
        end_date: this.endDate
      }, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      })
      .then(response => {
        if (response.data.status === 'success') {
          alert('Комната успешно забронирована');
          this.fetchRooms(); // Обновление списка комнат
        } else {
          console.error('Ответ об ошибке:', response.data);
          alert('Ошибка бронирования: ' + response.data.message);
        }
      })
      .catch(error => {
        console.error('Ошибка бронирования комнаты:', error);
        alert('Ошибка бронирования: ' + error.message);
      });
    },

  },
  created() {
    this.fetchRooms();
  }
};
</script>

<style scoped>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
}

td {
  background-color: #fff;
}

tr:hover {
  background-color: #f5f5f5;
}

.date-selection {
  margin: 10px 0;
}

.date-selection input {
  margin-right: 10px;
}
</style>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/store.js

import { createStore } from 'vuex';


export default createStore({
  state: {
    user: null,
  },
  mutations: {
    setUser(state, userData) {
      state.user = userData;
    },
    clearUser(state) {
      state.user = null;
    },
  },
  getters: {
    isAuthenticated: state => !!state.user,
    user: state => state.user,
  },
});





File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/package.json

{
  "name": "my-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "axios": "^1.6.3",
    "bootstrap": "^5.3.2",
    "bootstrap-vue": "^2.23.1",
    "core-js": "^3.8.3",
    "vue": "^3.2.13",
    "vue-axios": "^3.5.2"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ],
  "description": "## Project setup ``` npm install ```",
  "main": "babel.config.js",
  "author": "",
  "license": "ISC"
}


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LeaveFeedback.vue

<template>
  <div>
    <h2>Отзывы о комнате {{ roomId }}</h2>
    <ul>
      <li v-for="review in reviews" :key="review.id">
        {{ review.text }} - {{ review.author }}
      </li>
    </ul>
    <button @click="goToAddReview">Добавить отзыв</button>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  props: {
    roomId: {
      type: Number,
      required: true
    }
  },
  data() {
    return {
      reviews: []
    };
  },
  methods: {
    fetchReviews() {
      axios.get(`http://localhost:8000/hotel_api/api/rooms/${this.roomId}/reviews`)
        .then(response => {
          this.reviews = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении отзывов:', error);
        });
    },
    goToAddReview() {
      this.$router.push(`/room/${this.roomId}/add-review`);
    }
  },
  created() {
    this.fetchReviews();
  }
};
</script>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/FloorOccupancy.vue

<template>
  <div>
    <h2>Заполненность этажей</h2>
    <table>
      <thead>
        <tr>
          <th>Этаж</th>
          <th>Занятые комнаты</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="floor in floors" :key="floor.number">
          <td>{{ floor.number }}</td>
          <td>{{ floor.occupied_rooms_count }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      floors: []
    };
  },
  created() {
    axios.get('http://localhost:8000/hotel_api/floor_occupancy/')
      .then(response => {
        this.floors = response.data;
      })
      .catch(error => {
        console.error('Ошибка:', error);
      });
  }
};
</script>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/ClientsTable.vue

<template>
  <div>
    <h2>Список клиентов</h2>
    <table class="table">
      <thead>
        <tr>
          <th>ID клиента</th>
          <th>Имя</th>
          <th>Фамилия</th>
          <th>Номер комнаты</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="client in clients" :key="client.id">
          <td>{{ client.id }}</td>
          <td>{{ client.client_info.first_name }}</td>
          <td>{{ client.client_info.last_name }}</td>
          <td>{{ client.room }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      clients: []
    };
  },
  created() {
    this.fetchClients();
  },
  methods: {
    fetchClients() {
      axios.get('http://localhost:8000/hotel_api/api/clients')
        .then(response => {
          this.clients = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении данных о клиентах:', error);
        });
    }
  }
};
</script>

<style scoped>
.table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  background-color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.table th,
.table td {
  padding: 10px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.table th {
  background-color: #f2f2f2;
}

.table tbody tr:nth-child(even) {
  background-color: #f5f5f5;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomStatistics.vue

<template>
  <div>
    <h2>Статистика по комнатам</h2>
    <table>
      <thead>
        <tr>
          <th>Тип комнаты</th>
          <th>Общее количество</th>
          <th>Средняя стоимость</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="stat in roomStats" :key="stat.room_type">
          <td>{{ stat.room_type }}</td>
          <td>{{ stat.total }}</td>
          <td>{{ stat.average_cost }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      roomStats: []
    };
  },
  created() {
    this.fetchRoomStatistics();
  },
  methods: {
    fetchRoomStatistics() {
      axios.get('http://localhost:8000/hotel_api/api/room-statistics/') 
        .then(response => {
          this.roomStats = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении статистики комнат:', error);
        });
    }
  }
};
</script>

<style>
table {
  width: 100%;
  border-collapse: collapse;
}
th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}
th {
  background-color: #f2f2f2;
}
td {
  background-color: #fff;
}
tr:hover {
  background-color: #f5f5f5;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/ComplexRoomsTable.vue

<template>
  <div>
    <h2>Комплексная информация о комнатах</h2>
    <table>
      <thead>
        <tr>
          <th>ID комнаты</th>
          <th>Тип комнаты</th>
          <th>Статус</th>
          <th>Стоимость</th>
      
        </tr>
      </thead>
      <tbody>
        <tr v-for="room in complexRooms" :key="room.id">
          <td>{{ room.id }}</td>
          <td>{{ room.room_type }}</td>
          <td>{{ room.status }}</td>
          <td>{{ room.cost }}</td>
      
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      complexRooms: []
    };
  },
  created() {
    this.fetchComplexRooms();
  },
  methods: {
    fetchComplexRooms() {
      axios.get('http://localhost:8000/hotel_api/complex_rooms/') 
        .then(response => {
          this.complexRooms = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении комплексной информации о комнатах:', error);
        });
    }
  }
};
</script>


  
  <style>
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  
  th {
    background-color: #f2f2f2;
  }
  
  td {
    background-color: #fff;
  }
  
  tr:hover {
    background-color: #f5f5f5;
  }
  </style>
  

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LeaveFeedback.vue

<template>
  <div>
    <h2>Отзывы о комнате {{ roomId }}</h2>
    <ul>
      <li v-for="review in reviews" :key="review.id">
        {{ review.text }} - {{ review.author }}
      </li>
    </ul>
    <button @click="goToAddReview">Добавить отзыв</button>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  props: {
    roomId: {
      type: Number,
      required: true
    }
  },
  data() {
    return {
      reviews: []
    };
  },
  methods: {
    fetchReviews() {
      axios.get(`http://localhost:8000/hotel_api/api/rooms/${this.roomId}/reviews`)
        .then(response => {
          this.reviews = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении отзывов:', error);
        });
    },
    goToAddReview() {
      this.$router.push(`/room/${this.roomId}/add-review`);
    }
  },
  created() {
    this.fetchReviews();
  }
};
</script>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/AddReview.vue

<template>
    <div>
      <h2>Добавить отзыв</h2>
      <form @submit.prevent="submitReview">
        <textarea v-model="reviewText" placeholder="Ваш отзыв"></textarea>
        <button type="submit">Отправить</button>
      </form>
    </div>
  </template>
  
  <script>
  import ReviewService from '@/reviewService'; 
  
  export default {
    props: {
      roomId: {
        type: Number,
        required: true
      }
    },
    data() {
      return {
        reviewText: ''
      };
    },
    methods: {
      submitReview() {
        const reviewData = {
          text: this.reviewText,
          room: this.roomId
        };
        ReviewService.createReview(reviewData)
          .then(() => {
            alert('Отзыв добавлен');
            this.reviewText = '';
            this.$emit('review-added'); // Отправка события родительскому компоненту
          })
          .catch(error => {
            console.error('Ошибка при добавлении отзыва:', error);
          });
      }
    }
  };
  </script>
  

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomReviewsList.vue

<template>
    <div>
      <h2>Отзывы о комнате {{ roomId }}</h2>
      <ul>
        <li v-for="review in reviews" :key="review.id">
          {{ review.text }} - {{ review.author }}
          <button @click="deleteReview(review.id)">Удалить</button>
        </li>
      </ul>
      <router-link :to="`/room/${roomId}/add-review`">Добавить отзыв</router-link>
    </div>
  </template>
  
  <script>
  import ReviewService from '@/reviewService.js'; // Убедитесь, что путь к файлу reviewService.js верный
  
  export default {
    props: {
      roomId: {
        type: Number,
        required: true
      }
    },
    data() {
      return {
        reviews: []
      };
    },
    methods: {
      fetchReviews() {
        ReviewService.getAllReviews()
          .then(response => {
            this.reviews = response.data;
          })
          .catch(error => {
            console.error('Ошибка при получении отзывов:', error);
          });
      },
      deleteReview(reviewId) {
        ReviewService.deleteReview(reviewId)
          .then(() => {
            alert('Отзыв удален');
            this.fetchReviews(); // Обновление списка отзывов после удаления
          })
          .catch(error => {
            console.error('Ошибка при удалении отзыва:', error);
          });
      }
    },
    created() {
      this.fetchReviews();
    }
  };
  </script>
  

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/reviewService.js

import axios from 'axios';

const API_URL = 'http://localhost:8000/hotel_api/api/reviews/';

class ReviewService {
  // Получение всех отзывов
  getAllReviews() {
    return axios.get(API_URL);
  }

  // Получение отзыва по ID
  getReviewById(id) {
    return axios.get(API_URL + id + '/');
  }

  // Создание нового отзыва
  createReview(reviewData) {
    return axios.post(API_URL, reviewData);
  }

  // Обновление отзыва по ID
  updateReview(id, reviewData) {
    return axios.put(API_URL + id + '/', reviewData);
  }

  // Частичное обновление отзыва по ID
  partialUpdateReview(id, reviewData) {
    return axios.patch(API_URL + id + '/', reviewData);
  }

  // Удаление отзыва по ID
  deleteReview(id) {
    return axios.delete(API_URL + id + '/');
  }
}

export default new ReviewService();

