

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/admin.py

from django.contrib import admin
from .models import (Room, Client, ClientInfo, Employee, Floor, Day, 
                     EmployeeFloor, EmployeeDay, Booking, CustomUser)

# Класс администратора для модели Room
@admin.register(Room)
class RoomAdmin(admin.ModelAdmin):
    list_display = ('room_type', 'floor', 'status', 'cost')

# Класс администратора для модели Booking 
@admin.register(Booking)
class BookingAdmin(admin.ModelAdmin):
    list_display = ['user', 'room', 'start_date', 'end_date', 'confirmed']
    actions = ['confirm_booking']

    def confirm_booking(self, request, queryset):
        for booking in queryset:
            booking.confirmed = True
            booking.room.set_occupied()  # Меняем статус комнаты на 'occupied'
            booking.save()
    confirm_booking.short_description = "Confirm selected bookings"

    def cancel_booking(self, request, queryset):
        for booking in queryset:
            room = booking.room
            room.set_available()
            room.save()
            booking.delete()
    cancel_booking.short_description = "Cancel selected bookings and set room available"

    def delete_queryset(self, request, queryset):
        for obj in queryset:
            room = obj.room
            room.set_available()
            room.save()
        queryset.delete()  # This deletes all bookings in the queryset

    def delete_model(self, request, obj):
        room = obj.room
        room.set_available()
        room.save()
        obj.delete()

# Регистрация других моделей
admin.site.register(CustomUser)
admin.site.register(Client)
admin.site.register(ClientInfo)
admin.site.register(Employee)
admin.site.register(Floor)
admin.site.register(Day)
admin.site.register(EmployeeFloor)
admin.site.register(EmployeeDay)


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/urls.py

from django.urls import path, include, re_path
from rest_framework.routers import DefaultRouter
from .views import (
    RoomViewSet, ClientViewSet, EmployeeViewSet, FloorViewSet,
    FloorOccupancyViewSet, DayViewSet, EmployeeFloorViewSet,
    EmployeeDayViewSet, ClientInfoViewSet, ComplexRoomViewSet,
    NestedClientViewSet, UserViewSet, BookingViewSet,
    RoomStatisticsView, home, register_view,
    login_view, alternative_login_view, api_login,
    generate_token, register_user, book_room,
    rooms_list, clients_list, employees_list, floors_list,
    client_info_list, days_list, employee_floors_list,
    employee_days_list, bookings_list, book_selected_rooms
)
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework.permissions import AllowAny
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework.permissions import AllowAny



app_name = 'hotel_api'

schema_view = get_schema_view(
    openapi.Info(
        title="API Documentation",
        default_version='v1',
        description="API description",
    
    ),
    public=True,
    permission_classes=(AllowAny,),
)

router = DefaultRouter()
router.register(r'rooms', RoomViewSet)
router.register(r'clients', ClientViewSet)
router.register(r'employees', EmployeeViewSet)
router.register(r'floors', FloorViewSet)
router.register(r'days', DayViewSet)
router.register(r'employee_floors', EmployeeFloorViewSet)
router.register(r'employee_days', EmployeeDayViewSet)
router.register(r'client_info', ClientInfoViewSet)
router.register(r'complex_rooms', ComplexRoomViewSet)
router.register(r'nested_clients', NestedClientViewSet)
router.register(r'floor_occupancy', FloorOccupancyViewSet)
router.register(r'users', UserViewSet)
router.register(r'bookings', BookingViewSet)

urlpatterns = [
    path('', home, name='home'),
    path('rooms/', rooms_list, name='rooms_list'),
    path('book_selected_rooms/', book_selected_rooms, name='book_selected_rooms'),
    path('register/', register_user, name='register_user'),
    path('login/', login_view, name='login'),
    path('alternative_login/', alternative_login_view, name='alternative_login'),
    path('register/', register_view, name='register'),
    path('clients/', clients_list, name='clients_list'),
    path('employees/', employees_list, name='employees_list'),
    path('floors/', floors_list, name='floors_list'),
    path('client-info/', client_info_list, name='client_info_list'),
    path('days/', days_list, name='days_list'),
    path('employee-floors/', employee_floors_list, name='employee_floors_list'),
    path('employee-days/', employee_days_list, name='employee_days_list'),
    path('bookings/', bookings_list, name='bookings_list'),
    path('api/login/', api_login, name='api_login'),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/book_room/<int:room_id>/', book_room, name='book_room'),
    path('api/room-statistics/', RoomStatisticsView.as_view(), name='room-statistics'),
    path('api/', include(router.urls)),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
    path('auth/', include('djoser.urls')),
    re_path(r'^auth/', include('djoser.urls.authtoken')),
]


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/serializers.py

from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import Room, Client, ClientInfo, Employee, Floor, Day, EmployeeFloor, EmployeeDay, Booking, CustomUser

User = get_user_model()

class RoomSerializer(serializers.ModelSerializer):
    class Meta:
        model = Room
        fields = '__all__'

class ClientInfoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClientInfo
        fields = '__all__'

class EmployeeSerializer(serializers.ModelSerializer):
    class Meta:
        model = Employee
        fields = '__all__'

class FloorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Floor
        fields = '__all__'

class DaySerializer(serializers.ModelSerializer):
    class Meta:
        model = Day
        fields = '__all__'

class EmployeeDaySerializer(serializers.ModelSerializer):
    class Meta:
        model = EmployeeDay
        fields = '__all__'

class EmployeeFloorSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)
    class Meta:
        model = EmployeeFloor
        fields = ['employee', 'floor', 'room']

class NestedClientSerializer(serializers.ModelSerializer):
    room = RoomSerializer(read_only=True)
    client_info = ClientInfoSerializer(read_only=True)
    class Meta:
        model = Client
        fields = ['id', 'room', 'client_info']

class ComplexRoomSerializer(serializers.ModelSerializer):
    clients = NestedClientSerializer(many=True, read_only=True)
    employees = EmployeeFloorSerializer(source='employee_floor_set', many=True, read_only=True)
    class Meta:
        model = Room
        fields = ['id', 'room_type', 'status', 'cost', 'floor', 'clients', 'employees']

class ClientSerializer(serializers.ModelSerializer):
    client_info = ClientInfoSerializer()
    class Meta:
        model = Client
        fields = '__all__'
    def create(self, validated_data):
        client_info_data = validated_data.pop('client_info')
        client_info = ClientInfo.objects.create(**client_info_data)
        client = Client.objects.create(client_info=client_info, **validated_data)
        return client

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'first_name', 'last_name', 'email', 'phone')
        extra_kwargs = {'phone': {'required': False}}

class BookingSerializer(serializers.ModelSerializer):
    user_details = serializers.SerializerMethodField()
    room_details = serializers.SerializerMethodField()
    class Meta:
        model = Booking
        fields = ['id', 'user', 'room', 'start_date', 'end_date', 'confirmed']
    def get_user_details(self, obj):
        return UserSerializer(obj.user).data
    def get_room_details(self, obj):
        return RoomSerializer(obj.room).data

class FloorOccupancySerializer(serializers.ModelSerializer):
    occupied_rooms_count = serializers.SerializerMethodField()
    class Meta:
        model = Floor
        fields = ['number', 'occupied_rooms_count']
    def get_occupied_rooms_count(self, floor):
        return Room.objects.filter(floor=floor, status='occupied').count()


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.contrib.auth.models import User
from django.contrib import admin


class CustomUser(AbstractUser):
    phone = models.CharField("Телефон", max_length=15, blank=True, null=True)

    REQUIRED_FIELDS = ['first_name', 'last_name', 'phone']

    def __str__(self):
        return self.username


class Floor(models.Model):
    number = models.IntegerField()

    def __str__(self):
        return f"Floor {self.number}"
    





class Room(models.Model):
    ROOM_TYPES = (
        ('single', 'Single'),
        ('double', 'Double'),
        ('suite', 'Suite'),
    )
    STATUS = (
        ('available', 'Available'),
        ('occupied', 'Occupied'),
        ('cleaning', 'Cleaning'),
    )
    room_type = models.CharField(max_length=10, choices=ROOM_TYPES)
    status = models.CharField(max_length=10, choices=STATUS)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    floor = models.ForeignKey(Floor, on_delete=models.CASCADE, related_name='rooms')
    booked_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='booked_rooms')
    booking_confirmed = models.BooleanField(default=False)
    
    def set_booked(self):
        self.status = 'booked'
        self.save()

    def set_occupied(self):
        self.status = 'occupied'
        self.save()

    def set_available(self):
        self.status = 'available'
        self.save()


    def __str__(self):
        return f"{self.get_room_type_display()} on Floor {self.floor.number}"
    

    
    





class Booking(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, 
        on_delete=models.CASCADE
    )
    room = models.ForeignKey(Room, on_delete=models.CASCADE)
    start_date = models.DateField()
    end_date = models.DateField()
    confirmed = models.BooleanField(default=False)

    def __str__(self):
        return f'Booking {self.id} for {self.room}'







class ClientInfo(models.Model):
    passport_number = models.CharField(max_length=50)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    patronymic = models.CharField(max_length=100, blank=True)
    city = models.CharField(max_length=100)
    check_in_date = models.DateTimeField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Client(models.Model):
    client_info = models.ForeignKey(ClientInfo, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.SET_NULL, null=True, related_name='clients')

    def __str__(self):
        return f"Client {self.client_info.first_name} {self.client_info.last_name}"

class Employee(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    patronymic = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

class Day(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class EmployeeFloor(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    floor = models.ForeignKey(Floor, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name='employee_floor_set')  # связал с комнатами


    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} on Floor {self.floor.number}"

class EmployeeDay(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    day = models.ForeignKey(Day, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.employee.first_name} {self.employee.last_name} on {self.day.name}"


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/views.py

# views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth import login, authenticate
from .models import Room, Client, Employee, Floor, Day, EmployeeFloor, EmployeeDay, ClientInfo, Booking, CustomUser
from .serializers import (RoomSerializer, ClientSerializer, EmployeeSerializer, 
                          FloorSerializer, DaySerializer, EmployeeFloorSerializer, 
                          EmployeeDaySerializer, ClientInfoSerializer, BookingSerializer, 
                          ComplexRoomSerializer, NestedClientSerializer, FloorOccupancySerializer, 
                          UserSerializer)
from .forms import CustomUserCreationForm
from django.contrib.auth import get_user_model
from rest_framework import status, viewsets
from datetime import datetime
from rest_framework.decorators import action, api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework_simplejwt.tokens import RefreshToken, AccessToken, TokenError
import json
from rest_framework.views import APIView
from django.db.models import Count, Avg

User = get_user_model()

class RoomStatisticsView(APIView):
    def get(self, request, format=None):
        stats = Room.objects.values('room_type').annotate(
            total=Count('id'),
            average_cost=Avg('cost')
        ).order_by('room_type')
        return Response(stats)

class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.all()
    serializer_class = ClientSerializer

class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer

class FloorOccupancyViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Floor.objects.all()
    serializer_class = FloorOccupancySerializer

class BookingViewSet(viewsets.ModelViewSet):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer

    @action(detail=False, methods=['get'])
    def by_date(self, request):
        date = request.query_params.get('date')
        bookings = Booking.objects.filter(start_date=date)
        serializer = self.get_serializer(bookings, many=True)
        return Response(serializer.data)

class ComplexRoomViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Room.objects.filter(status='occupied').prefetch_related('clients', 'employee_floor_set')
    serializer_class = ComplexRoomSerializer

class NestedClientViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Client.objects.select_related('room', 'client_info')
    serializer_class = NestedClientSerializer

class UserViewSet(viewsets.ModelViewSet):
    queryset = CustomUser.objects.all()
    serializer_class = UserSerializer

class RoomViewSet(viewsets.ModelViewSet):
    queryset = Room.objects.all()
    serializer_class = RoomSerializer

class FloorViewSet(viewsets.ModelViewSet):
    queryset = Floor.objects.all()
    serializer_class = FloorSerializer

class DayViewSet(viewsets.ModelViewSet):
    queryset = Day.objects.all()
    serializer_class = DaySerializer

class EmployeeFloorViewSet(viewsets.ModelViewSet):
    queryset = EmployeeFloor.objects.all()
    serializer_class = EmployeeFloorSerializer

class EmployeeDayViewSet(viewsets.ModelViewSet):
    queryset = EmployeeDay.objects.all()
    serializer_class = EmployeeDaySerializer

class ClientInfoViewSet(viewsets.ModelViewSet):
    queryset = ClientInfo.objects.all()
    serializer_class = ClientInfoSerializer

@csrf_exempt
def login_view(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')
        user = authenticate(username=username, password=password)
        if user is not None:
            refresh = RefreshToken.for_user(user)
            access_token = str(refresh.access_token)
            try:
                AccessToken(access_token)
                login(request, user)
                return JsonResponse({'status': 'success', 'refresh': str(refresh), 'access': access_token})
            except TokenError as e:
                return JsonResponse({'status': 'error', 'message': str(e)}, status=401)
        else:
            return JsonResponse({'status': 'error'}, status=401)
    return JsonResponse({'error': 'Invalid method'}, status=405)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def book_room(request, room_id):
    room = get_object_or_404(Room, pk=room_id)
    if room.status != 'available':
        return JsonResponse({'status': 'error', 'message': 'Room is not available'}, status=400)
    start_date = request.data.get('start_date')
    end_date = request.data.get('end_date')
    if not start_date or not end_date:
        return JsonResponse({'status': 'error', 'message': 'Start date and end date are required'}, status=400)
    try:
        start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
        if start_date >= end_date:
            return JsonResponse({'status': 'error', 'message': 'End date must be after start date'}, status=400)
    except ValueError:
        return JsonResponse({'status': 'error', 'message': 'Invalid date format'}, status=400)
    booking = Booking.objects.create(user=request.user, room=room, start_date=start_date, end_date=end_date)
    room.status = 'booked'
    room.save()
    return JsonResponse({'status': 'success', 'booking_id': booking.id})

def rooms_list(request):
    room_type_query = request.GET.get('room_type', '').strip()
    room_status_query = request.GET.get('room_status', '').strip()
    rooms = Room.objects.all()
    if room_type_query:
        rooms = rooms.filter(room_type__iexact=room_type_query)
    if room_status_query:
        rooms = rooms.filter(status__iexact=room_status_query)
    return render(request, 'hotel_api/rooms_list.html', {'rooms': rooms})

@login_required
def book_selected_rooms(request):
    if request.method == 'POST':
        room_ids = request.POST.getlist('room_ids')
        rooms = Room.objects.filter(id__in=room_ids, is_available=True)
        for room in rooms:
            room.booked_by = request.user
            room.is_available = False
            room.save()
        return redirect('rooms_list')
    return render(request, 'hotel_api/rooms_list.html')

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def generate_token(request):
    user = request.user
    refresh = RefreshToken.for_user(user)
    refresh.access_token.set_exp(timezone.now() + SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'])
    access_token = str(refresh.access_token)
    return Response({'access_token': access_token})

@csrf_exempt
def api_login(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        username = data.get('username')
        password = data.get('password')
        user = authenticate(username=username, password=password)
        if user is not None:
            refresh = RefreshToken.for_user(user)
            return JsonResponse({'refresh': str(refresh), 'access': str(refresh.access_token)})
        else:
            return JsonResponse({'message': 'Неверные учетные данные'}, status=401)
    return JsonResponse({'message': 'Неверный запрос'}, status=400)

@csrf_exempt
def register_user(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = User.objects.create_user(username=data['username'], email=data['email'], password=data['password'])
        return JsonResponse({'id': user.id, 'username': user.username}, status=201)
    return JsonResponse({'error': 'Invalid request'}, status=400)

def login_redirect(request):
    return redirect("http://localhost:8080/login")

def alternative_login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('home')
        else:
            print("с днем рождения!")
            pass
    form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})

def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
    else:
        form = CustomUserCreationForm()
    return render(request, 'registration/register.html', {'form': form})

@login_required(login_url='/login/')
def home(request):
    return render(request, 'hotel_api/home.html')

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('home')
    else:
        form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})

def clients_list(request):
    clients = Client.objects.all()
    return render(request, 'hotel_api/client_list.html', {'clients': clients})

def employees_list(request):
    employees = Employee.objects.all()
    return render(request, 'hotel_api/employee_list.html', {'employees': employees})

def bookings_list(request):
    return render(request, 'hotel_api/bookings_list.html')

def floors_list(request):
    floors = Floor.objects.all()
    return render(request, 'hotel_api/floor_list.html', {'floors': floors})

def staff_management(request):
    return render(request, 'hotel_api/staff_management.html')

def reports(request):
    return render(request, 'hotel_api/reports.html')

def settings(request):
    return render(request, 'hotel_api/settings.html')

def client_info_list(request):
    client_info = ClientInfo.objects.all()
    return render(request, 'hotel_api/client_info_list.html', {'client_info': client_info})

def days_list(request):
    days = Day.objects.all()
    return render(request, 'hotel_api/days_list.html', {'days': days})

def employee_floors_list(request):
    employee_floors = EmployeeFloor.objects.all()
    return render(request, 'hotel_api/employee_floors_list.html', {'employee_floors': employee_floors})

def employee_days_list(request):
    employee_days = EmployeeDay.objects.all()
    return render(request, 'hotel_api/employee_days_list.html', {'employee_days': employee_days})


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/rooms_list.html

<!DOCTYPE html>
<html>
<head>
    <title>Rooms List</title>
    <style>
        /* Add your CSS styles here */
        h1 {
            font-size: 24px;
            text-align: center;
        }

        form {
            margin: 20px 0;
            text-align: center;
        }

        label {
            font-weight: bold;
        }

        select {
            margin: 5px;
        }

        table {
            width: 80%;
            margin: 20px auto;
            border-collapse: collapse;
        }

        th, td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        tbody tr:hover {
            background-color: #f5f5f5;
        }

        .back-button {
            display: block;
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <a href="http://localhost:8000/" class="back-button">Back to Home</a>
    
    <h1>Rooms List</h1>

    <form method="get">
        <!-- Filter by Room Type -->
        <label for="room_type">Room Type:</label>
        <select name="room_type" id="room_type">
            <option value="">--Select a Type--</option>
            <option value="single">Single</option>
            <option value="double">Double</option>
            <option value="suite">Suite</option>
        </select>
    
        <!-- Filter by Room Status -->
        <label for="room_status">Room Status:</label>
        <select name="room_status" id="room_status">
            <option value="">--Select a Status--</option>
            <option value="available">Available</option>
            <option value="occupied">Occupied</option>
            <option value="cleaning">Cleaning</option>
        </select>
    
        <input type="submit" value="To book">
        <input type="submit" value="Filter">
    </form>

    <table>
        <thead>
            <tr>
                <th>Room Type</th>
                <th>Floor Number</th>
                <th>Status</th>
                <th>Cost</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for room in rooms %}
            <tr>
                <td>{{ room.get_room_type_display }}</td>
                <td>{{ room.floor.number }}</td>
                <td>{{ room.get_status_display }}</td>
                <td>{{ room.cost }}</td>
                <td>
                    {% if room.status == 'available' %}
                        <a href="{% url 'hotel_api:book_room' room.id %}">Забронировать</a>
                    {% endif %}
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/menu.html

<!DOCTYPE html>
<html>
<head>
    <title>Hotel Management Menu</title>
    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
</head>
<body>
    <header>
        <h1>Welcome to the Hotel Management System</h1>
    </header>

    <nav class="menu">
        <ul>
            <li><a href="{% url 'rooms_list' %}">Rooms</a></li>
            <li><a href="{% url 'clients_list' %}">Clients</a></li>
            <li><a href="{% url 'employees_list' %}">Employees</a></li>
            {% if user.is_authenticated %}
                <li><a href="{% url 'logout' %}">Logout</a></li>
            {% else %}
                <li><a href="{% url 'login' %}">Login</a></li>
            {% endif %}
        </ul>
    </nav>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_management/settings.py

"""
Django settings for hotel_management project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta 

ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4o=g1ta42q5sx45l^9uz(e0+7jez!^w4ehcqxp6@tn(!suoke2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost']

LOGOUT_REDIRECT_URL = '/'

CSRF_TRUSTED_ORIGINS = ["http://localhost:8080"]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080"
]

 
LOGIN_REDIRECT_URL = '/hotel_api/'  






CORS_ORIGIN_ALLOW_ALL = True

INSTALLED_APPS = [
    'hotel_api', 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    'drf_yasg',
    'corsheaders',
    'rest_framework_simplejwt',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'hotel_api.utils.DisableCSRF',  
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'hotel_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'hotel_management.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Путь к статическим файлам (CSS, JavaScript, Images)

STATICFILES_DIRS = [
    'C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/dist',
]




# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ),
}

# Djoser settings
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
        'SERIALIZERS': {
        'user_create': 'hotel_api.serializers.UserSerializer',
        'user': 'hotel_api.serializers.UserSerializer',
        'current_user': 'hotel_api.serializers.UserSerializer',
    },
}


AUTH_USER_MODEL = 'hotel_api.CustomUser'




EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# settings.py

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_REFRESH_AFTER_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_SLIDING_LIFETIME': timedelta(days=15),
    'SLIDING_TOKEN_SLIDING_LIFETIME': timedelta(days=30),
    'SLIDING_TOKEN_TYPE': 'sliding',
    'SLIDING_TOKEN_REFRESH_ROTATE': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),

}


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_management/urls.py

# hotel_management/hotel_management/urls.py

from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from hotel_api import views as hotel_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', auth_views.LoginView.as_view(), name='login'),
    path('login/', auth_views.LoginView.as_view(), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
    path('register/', hotel_views.register_view, name='register'),
    path('home/', hotel_views.home, name='home'),  
    path('hotel_api/', include('hotel_api.urls')),
    
]


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/registration/register.html

<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    <form method="post" action="{% url 'register' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Register">
    </form>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/registration/login.html

{% load static %}

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">
    <script>
        async function loginWithToken() {
            const token = document.getElementById('token').value;
            try {
                const response = await fetch('/home', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    // Перенаправление на страницу /home
                    window.location.href = 'http://localhost:8000/home/';
                } else {
                    alert("Ошибка аутентификации");
                }
            } catch (error) {
                console.error('Ошибка сети', error);
            }
        }
    </script>
    
</head>
<body>
    <!-- Форма для авторизации с использованием имени пользователя и пароля -->
    <h2>Login</h2>
    <form method="post" action="{% url 'hotel_api:alternative_login' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Login">
    </form>

    <!-- Форма для авторизации через токен -->
    <h2>Авторизация через токен</h2>
    <div>
        <input type="text" id="token" placeholder="Введите токен">
        <button type="button" onclick="loginWithToken()">Войти с токеном</button>
    </div>

    <!-- Кнопка регистрации -->
    <p>Don't have an account? <a href="{% url 'register' %}">Register here</a></p>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser

class CustomUserCreationForm(UserCreationForm):
    class Meta(UserCreationForm.Meta):
        model = CustomUser
        fields = UserCreationForm.Meta.fields + ('phone',)


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/utils.py

from django.utils.deprecation import MiddlewareMixin
from django.conf import settings

class DisableCSRF(MiddlewareMixin):
    def process_request(self, request):
        if settings.DEBUG:
            setattr(request, '_dont_enforce_csrf_checks', True)


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб3/hotel_management/hotel_api/templates/hotel_api/book_room.html

<!DOCTYPE html>
<html>
<head>
    <title>Book Room</title>
</head>
<body>
    <h1>Book Room</h1>
    <form method="post">
        {% csrf_token %}
        <!-- Поле для ввода даты начала бронирования -->
        <div>
            <label for="start_date">Start Date:</label>
            <input type="date" id="start_date" name="start_date" required>
        </div>
        <!-- Поле для ввода даты окончания бронирования -->
        <div>
            <label for="end_date">End Date:</label>
            <input type="date" id="end_date" name="end_date" required>
        </div>
        <!-- Кнопка для отправки формы -->
        <input type="submit" value="Book">
    </form>
</body>
</html>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/main.js

import { createApp } from 'vue'; 
import App from './App.vue';
import router from './router';
import store from './store'; //  хранилище Vuex
import axios from 'axios';
import { VueAxios } from 'vue-axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import BootstrapVue3 from 'bootstrap-vue-3';

const app = createApp(App);

app.use(router);
app.use(store); // Vuex в приложении
app.use(BootstrapVue3);
app.use(VueAxios, axios);

// Проверка localStorage на наличие токена и его установка в состояние Vuex
const userToken = localStorage.getItem('userToken');
if (userToken) {
  store.commit('setUser', { token: userToken });
}

app.mount('#app');


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/App.vue

<template>
  <div class="app-container">
    <img alt="Vue logo" src="./assets/logo.png" class="logo">
    <div class="menu" v-if="showButtons">
      <h1>Добро пожаловать в наш отель!</h1>
      <button @click="showComponent = 'login'">Вход</button>
      <button @click="showComponent = 'registration'">Регистрация</button>
    </div>
    <LoginPage v-if="showComponent === 'login'" @show-user-profile="showUserProfile" />
    <RegistrationPage v-if="showComponent === 'registration'" />
    <UserProfile v-if="showComponent === 'userProfile'" @go-back="showMainButtons" />
  </div>
</template>

<script>
import RegistrationPage from './components/RegistrationPage.vue';
import LoginPage from './components/LoginPage.vue';
import UserProfile from './components/UserProfile.vue';

export default {
  name: 'App',
  components: {
    RegistrationPage,
    LoginPage,
    UserProfile
  },
  data() {
    return {
      showComponent: null,
      showButtons: true,
    };
  },
  methods: {
    showUserProfile() {
      this.showComponent = 'userProfile';
      this.showButtons = false;
    },
    showMainButtons() {
      this.showComponent = null;
      this.showButtons = true;
    }
  }
};
</script>

<style scoped>
.app-container {
  text-align: center;
  background: linear-gradient(to right, #b4ffb0, #b19dff); 
  min-height: 100vh;
}

.logo {
  max-width: 150px;
  margin: 20px auto;
}

.menu h1 {
  color: #fff;
  text-shadow: 2px 2px 4px #000;
}

.menu {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  margin-bottom: 20px;
}

button {
  padding: 10px 20px;
  border: none;
  background-color: #007bff;
  color: white;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #0056b3;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/router/index.js

import { createRouter, createWebHistory } from 'vue-router';
import RegistrationPage from '../components/RegistrationPage.vue';
import LoginPage from '../components/LoginPage.vue';
import UserProfile from '../components/UserProfile.vue';
import ClientsTable from '../components/ClientsTable.vue';
import EmployeesTable from '../components/EmployeesTable.vue';

const routes = [
  
  { path: '/registration', component: RegistrationPage },
  { path: '/login', component: LoginPage },
  { path: '/user-profile', component: UserProfile },
  { path: '/clients', component: ClientsTable },
  { path: '/employees', component: EmployeesTable },
  
  // другие маршруты...
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RegistrationPage.vue

<template>
  <div>
    <h2>Регистрация</h2>
    <!-- Форма регистрации -->
    <form @submit.prevent="register">
      <div class="input-wrapper">
        <input type="text" v-model="userData.username" placeholder="Имя пользователя">
      </div>
      <div class="input-wrapper">
        <input type="password" v-model="userData.password" placeholder="Пароль">
      </div>
      <button type="submit">Зарегистрироваться</button>
    </form>

    <!-- Сообщение об успешной регистрации -->
    <div v-if="registrationSuccess" class="success-message">
      Регистрация прошла успешно! Теперь вы можете войти.
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      userData: {
        username: '',
        email: '',
        password: ''
      },
      registrationSuccess: false, // Добавляем переменную для отслеживания успешной регистрации
    };
  },
  methods: {
    async register() {
      try {
        const response = await fetch('http://localhost:8000/hotel_api/register/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.userData)
        });

        if (response.ok) {
          const data = await response.json();
          console.log('Успешная регистрация', data);
          this.registrationSuccess = true; // Устанавливаем успешную регистрацию в true
        } else {
          console.error('Ошибка регистрации', response.statusText);
        }
      } catch (error) {
        console.error('Ошибка сети', error);
      }
    }
  }
};
</script>

<style scoped>
.navigation-links {
  text-align: center;
  margin-bottom: 20px;
}

.navigation-links a {
  margin: 0 10px;
  text-decoration: none;
  color: #333;
  font-weight: bold;
}

.navigation-links a:hover {
  color: #007bff;
  text-decoration: underline;
}

.input-wrapper {
  margin-bottom: 10px; /* Расстояние между полями ввода */
}

.success-message {
  color: green;
  margin-top: 10px;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LoginPage.vue

<template>
  <form @submit.prevent="login">
    <h2>Вход</h2>
    <div class="input-wrapper">
      <input type="text" v-model="userData.username" placeholder="Имя пользователя">
    </div>
    <div class="input-wrapper">
      <input type="password" v-model="userData.password" placeholder="Пароль">
    </div>
    <button type="submit">Войти</button>
    <div v-if="errorMessage" class="error-message">{{ errorMessage }}</div>
  </form>
</template>

<script>
export default {
  data() {
    return {
      userData: {
        username: '',
        password: '',
      },
      errorMessage: '',
    };
  },
  methods: {
    async login() {
      try {
        const response = await fetch('http://localhost:8000/hotel_api/api/login/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(this.userData)
        });

        if (response.ok) {
  const data = await response.json();
  localStorage.setItem('userToken', data.access);

  // Сохраните имя пользователя в состоянии Vuex
  this.$store.commit('setUser', { username: this.userData.username, token: data.access });

  this.$emit('show-user-profile');
  this.errorMessage = '';
}     
         else {
          this.errorMessage = 'Введите корректные данные';
        }
      } catch (error) {
        console.error('Ошибка сети', error);
      }
    }
  }
};
</script>

<style>
.input-wrapper {
  margin-bottom: 10px;
}

.error-message {
  color: red;
  margin-top: 10px;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/UserProfile.vue

<template>
  <div>
    <h2>Добро пожаловать в систему управления отелем, {{ username }}!</h2>
    <div class="navigation-links">
      <button @click="showRooms">Комнаты</button>
      <button @click="showClients">Клиенты</button>
      <button @click="showEmployees">Сотрудники</button>
      <button @click="emitBack">Назад</button>
    </div>
    <component :is="currentComponent" v-if="showTable" />
  </div>
</template>

<script>
import RoomsTable from './RoomsTable.vue';
import ClientsTable from './ClientsTable.vue';
import EmployeesTable from './EmployeesTable.vue';

export default {
  computed: {
    username() {
      return this.$store.state.user ? this.$store.state.user.username : 'Guest';
    }
  },
  components: {
    RoomsTable,
    ClientsTable,
    EmployeesTable
  },
  data() {
    return {
      showTable: false,
      currentComponent: null
    };
  },
  methods: {
    showRooms() {
      this.currentComponent = 'RoomsTable';
      this.showTable = true;
    },
    showClients() {
      this.currentComponent = 'ClientsTable';
      this.showTable = true;
    },
    showEmployees() {
      this.currentComponent = 'EmployeesTable';
      this.showTable = true;
    },
    emitBack() {
      this.showTable = false;
    }
  }
};
</script>

<style scoped>
.navigation-links {
  text-align: center;
  margin-bottom: 20px;
}

.navigation-links button {
  margin: 0 10px;
  text-decoration: none;
  color: #333;
  font-weight: bold;
}

.navigation-links button:hover {
  color: #007bff;
  text-decoration: underline;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomsTable.vue

<template> 
  <div>
    <h2>Список комнат</h2>

    <!-- Фильтры -->
    <label for="room_type">Тип комнаты:</label>
    <select v-model="filterType">
      <option value="">--Выберите тип--</option>
      <option value="single">Одноместный</option>
      <option value="double">Двухместный</option>
      <option value="suite">Люкс</option>
    </select>

    <label for="room_status">Статус комнаты:</label>
    <select v-model="filterStatus">
      <option value="">--Выберите статус--</option>
      <option value="available">Доступна</option>
      <option value="occupied">Занята</option>
      <option value="cleaning">На уборке</option>
    </select>



    <!-- Выбор даты бронирования -->
    <div class="date-selection">
      <input type="date" v-model="startDate" placeholder="Дата начала">
      <input type="date" v-model="endDate" placeholder="Дата окончания">
    </div>

    <!-- Таблица комнат -->
    <table>
      <thead>
        <tr>
          <th>Тип комнаты</th>
          <th>Номер этажа</th>
          <th>Статус</th>
          <th>Стоимость</th>
          <th>Действия</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="room in filteredRooms" :key="room.id">
          <td>{{ room.room_type }}</td>
          <td>{{ room.floor.number }}</td>
          <td>{{ room.status }}</td>
          <td>{{ room.cost }}</td>
          <td>
            <button v-if="room.status === 'available'" @click="bookRoom(room.id)">
              Забронировать
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      rooms: [],
      filterType: '',
      filterStatus: '',
      startDate: '', // Для хранения даты начала бронирования
      endDate: ''   // Для хранения даты окончания бронирования
    };
  },
  computed: {
    filteredRooms() {
      return this.rooms.filter(room => {
        return (!this.filterType || room.room_type === this.filterType) &&
               (!this.filterStatus || room.status === this.filterStatus);
      });
    }
  },
  methods: {
    fetchRooms() {
      axios.get('http://localhost:8000/hotel_api/api/rooms/')
        .then(response => {
          this.rooms = response.data;
        })
        .catch(error => {
          console.error('Ошибка загрузки комнат:', error);
        });
    },
    applyFilter() {
      this.fetchRooms();
    },
    bookRoom(roomId) {
    if (!this.startDate || !this.endDate) {
      alert('Необходимо указать даты начала и окончания бронирования');
      return;
    }

    const token = localStorage.getItem('userToken');
    axios.post(`http://localhost:8000/hotel_api/api/book_room/${roomId}/`, {
      start_date: this.startDate,
      end_date: this.endDate
    }, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
    .then(response => {
      if (response.data.status === 'success') {
        alert('Комната успешно забронирована');
        this.fetchRooms(); // Обновление списка комнат
      } else {
        console.error('Ответ об ошибке:', response.data);
        alert('Ошибка бронирования: ' + response.data.message);
      }
    })
    .catch(error => {
      console.error('Ошибка бронирования комнаты:', error);
      alert('Ошибка бронирования: ' + error.message);
    });
  }
  },
  created() {
    this.fetchRooms();
  }
};
</script>

<style scoped>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
}

td {
  background-color: #fff;
}

tr:hover {
  background-color: #f5f5f5;
}

.date-selection {
  margin: 10px 0;
}

.date-selection input {
  margin-right: 10px;
}
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/store.js

import { createStore } from 'vuex';


export default createStore({
  state: {
    user: null,
  },
  mutations: {
    setUser(state, userData) {
      state.user = userData;
    },
    clearUser(state) {
      state.user = null;
    },
  },
  getters: {
    isAuthenticated: state => !!state.user,
    user: state => state.user,
  },
});





File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/package.json

{
  "name": "my-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "axios": "^1.6.3",
    "bootstrap": "^5.3.2",
    "bootstrap-vue": "^2.23.1",
    "core-js": "^3.8.3",
    "vue": "^3.2.13",
    "vue-axios": "^3.5.2"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ],
  "description": "## Project setup ``` npm install ```",
  "main": "babel.config.js",
  "author": "",
  "license": "ISC"
}


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/LeaveFeedback.vue

<template>
  <div>
    <h2>Оставить отзыв</h2>
    <form @submit.prevent="submitFeedback">
      <div>
        <label for="room">Комната:</label>
        <select v-model="feedback.room">
          <option v-for="room in rooms" :value="room.id" :key="room.id">{{ room.name }}</option>
        </select>
      </div>
      <div>
        <label for="text">Текст отзыва:</label>
        <textarea v-model="feedback.text"></textarea>
      </div>
      <button type="submit">Отправить</button>
    </form>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      feedback: {
        room: '',
        text: ''
      },
      rooms: [] // Массив для хранения списка комнат
    };
  },
  methods: {
    submitFeedback() {
      axios.post('http://localhost:8000/hotel_api/api/reviews/', this.feedback, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('userToken')}`
        }
      })
      .then(() => {
        alert('Отзыв отправлен');
        this.feedback.room = '';
        this.feedback.text = '';
      })
      .catch(error => {
        console.error('Ошибка:', error);
      });
    },
    fetchRooms() {
      axios.get('http://localhost:8000/hotel_api/api/rooms/', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('userToken')}`
        }
      })
      .then(response => {
        this.rooms = response.data;
      })
      .catch(error => {
        console.error('Ошибка при загрузке комнат:', error);
      });
    }
  },
  created() {
    this.fetchRooms();
  }
};
</script>

<style>
/*  стили */
</style>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/FloorOccupancy.vue

<template>
  <div>
    <h2>Заполненность этажей</h2>
    <table>
      <thead>
        <tr>
          <th>Этаж</th>
          <th>Занятые комнаты</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="floor in floors" :key="floor.number">
          <td>{{ floor.number }}</td>
          <td>{{ floor.occupied_rooms_count }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      floors: []
    };
  },
  created() {
    axios.get('http://localhost:8000/hotel_api/floor_occupancy/')
      .then(response => {
        this.floors = response.data;
      })
      .catch(error => {
        console.error('Ошибка:', error);
      });
  }
};
</script>


File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/RoomReviews.vue

<template> 
    <div>
      <h2>Список комнат</h2>
  
      <!-- Фильтры -->
      <label for="room_type">Тип комнаты:</label>
      <select v-model="filterType">
        <option value="">--Выберите тип--</option>
        <option value="single">Одноместный</option>
        <option value="double">Двухместный</option>
        <option value="suite">Люкс</option>
      </select>
  
      <label for="room_status">Статус комнаты:</label>
      <select v-model="filterStatus">
        <option value="">--Выберите статус--</option>
        <option value="available">Доступна</option>
        <option value="occupied">Занята</option>
        <option value="cleaning">На уборке</option>
      </select>
  
      <button @click="applyFilter">Применить фильтр</button>
  
      <!-- Выбор даты бронирования -->
      <div class="date-selection">
        <input type="date" v-model="startDate" placeholder="Дата начала">
        <input type="date" v-model="endDate" placeholder="Дата окончания">
      </div>
  
      <!-- Таблица комнат -->
      <table>
        <thead>
          <tr>
            <th>Тип комнаты</th>
            <th>Номер этажа</th>
            <th>Статус</th>
            <th>Стоимость</th>
            <th>Действия</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="room in filteredRooms" :key="room.id">
            <td>{{ room.room_type }}</td>
            <td>{{ room.floor.number }}</td>
            <td>{{ room.status }}</td>
            <td>{{ room.cost }}</td>
            <td>
              <button v-if="room.status === 'available'" @click="bookRoom(room.id)">
                Забронировать
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </template>
  
  <script>
  import axios from 'axios';
  
  export default {
    data() {
      return {
        rooms: [],
        filterType: '',
        filterStatus: '',
        startDate: '', // Для хранения даты начала бронирования
        endDate: ''   // Для хранения даты окончания бронирования
      };
    },
    computed: {
      filteredRooms() {
        return this.rooms.filter(room => {
          return (!this.filterType || room.room_type === this.filterType) &&
                 (!this.filterStatus || room.status === this.filterStatus);
        });
      }
    },
    methods: {
      fetchRooms() {
        axios.get('http://localhost:8000/hotel_api/rooms/')
          .then(response => {
            this.rooms = response.data;
          })
          .catch(error => {
            console.error('Ошибка загрузки комнат:', error);
          });
      },
      applyFilter() {
        this.fetchRooms();
      },
      bookRoom(roomId) {
      if (!this.startDate || !this.endDate) {
        alert('Необходимо указать даты начала и окончания бронирования');
        return;
      }
  
      const token = localStorage.getItem('userToken');
      axios.post(`http://localhost:8000/hotel_api/book_room/${roomId}/`, {
        start_date: this.startDate,
        end_date: this.endDate
      }, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      })
      .then(response => {
        if (response.data.status === 'success') {
          alert('Комната успешно забронирована');
          this.fetchRooms(); // Обновление списка комнат
        } else {
          console.error('Ответ об ошибке:', response.data);
          alert('Ошибка бронирования: ' + response.data.message);
        }
      })
      .catch(error => {
        console.error('Ошибка бронирования комнаты:', error);
        alert('Ошибка бронирования: ' + error.message);
      });
    }
    },
    created() {
      this.fetchRooms();
    }
  };
  </script>
  
  <style scoped>
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }
  
  th {
    background-color: #f2f2f2;
  }
  
  td {
    background-color: #fff;
  }
  
  tr:hover {
    background-color: #f5f5f5;
  }
  
  .date-selection {
    margin: 10px 0;
  }
  
  .date-selection input {
    margin-right: 10px;
  }
  </style>

File: C:/Users/apce1/Desktop/УЧЕБА/Веб-программирование/ITMO_ICT_WebDevelopment_2023-2024/students/к3343d/labs/Nikiforov_Arsen/лаб4/my-project/src/components/ClientsTable.vue

<template>
  <div>
    <h2>Список клиентов</h2>
    <table>
      <thead>
        <tr>
          <th>ID клиента</th>
          <th>Имя</th>
          <th>Фамилия</th>
          <th>Номер комнаты</th>
          <!-- Дополнительные столбцы по необходимости -->
        </tr>
      </thead>
      <tbody>
        <tr v-for="client in clients" :key="client.id">
          <td>{{ client.id }}</td>
          <td>{{ client.first_name }}</td>
          <td>{{ client.last_name }}</td>
          <td>{{ client.room_number }}</td>
          <!-- Дополнительные данные по необходимости -->
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      clients: []
    };
  },
  created() {
    this.fetchClients();
  },
  methods: {
    fetchClients() {
      axios.get('http://localhost:8000/hotel_api/api//clients') // API URL
        .then(response => {
          this.clients = response.data;
        })
        .catch(error => {
          console.error('Ошибка при получении данных о клиентах:', error);
        });
    }
  }
};
</script>

<style>
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

th {
  background-color: #f2f2f2;
}

td {
  background-color: #fff;
}

tr:hover {
  background-color: #f5f5f5;
}
</style>
